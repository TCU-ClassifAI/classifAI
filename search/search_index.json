{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"ClassifAI Documentation <p>     ClassifAI enhances educational content by transcribing video and audio into text for user modification and categorizes questions, offering engagement insights and user-friendly access. Visit The Portal \u00bb Report Bug     \u00b7     Request Feature     \u00b7     About the Project </p>"},{"location":"#list-of-pages-of-documentation","title":"List of Pages of Documentation","text":"<ul> <li>Home</li> <li>About</li> <li>Getting Started With Backend &gt;<ul> <li>Express Backend Setup</li> <li>Webserver Backend APIs</li> <li>Express API to React Guide</li> </ul> </li> <li>Contribution &gt; <ul> <li>Contribution Overview</li> <li>Add Documentation</li> <li>Style Guide</li> </ul> </li> <li>Structure of Project</li> </ul>"},{"location":"about/","title":"ClassifAI Documentation","text":""},{"location":"about/#introduction","title":"Introduction","text":"<p>Welcome to the ClassifAI documentation! ClassifAI is an educational senior design project aimed at assisting teachers in transcribing and analyzing audio or video content. It provides a powerful tool for automatically transcribing teacher's audio or video recordings and analyzing the questions asked by students, classifying them based on their level of inquiry.</p>"},{"location":"about/#features","title":"Features","text":"<p>ClassifAI offers the following key features:</p> <ul> <li>Audio/Video Transcription: ClassifAI utilizes advanced speech recognition algorithms to transcribe audio or video recordings of teachers' lessons.</li> <li>Question Analysis: The system analyzes the questions asked by students during the lesson and provides insights into their level of inquiry.</li> <li>Classification: ClassifAI classifies the questions into different categories based on their level of inquiry, such as basic, intermediate, and advanced.</li> <li>Dashboard: The system provides a user-friendly dashboard to visualize and explore the transcriptions and question analysis results.</li> </ul>"},{"location":"about/#getting-started","title":"Getting Started","text":"<p>To get started with ClassifAI, follow these steps:</p> <ol> <li>Install ClassifAI on your local machine or access it through the provided web interface.</li> <li>Upload your audio or video recordings of the lesson you want to transcribe and analyze.</li> <li>Wait for the system to process the recordings and generate the transcriptions.</li> <li>Explore the transcriptions and analyze the questions asked by students using the provided dashboard.</li> <li>Use the classification results to gain insights into the level of inquiry of the questions asked during the lesson.</li> </ol>"},{"location":"about/#usage","title":"Usage","text":""},{"location":"about/#uploading-recordings","title":"Uploading Recordings","text":"<p>To transcribe and analyze your lesson recordings, follow these steps:</p> <ol> <li>Log in to the ClassifAI system using your credentials.</li> <li>Navigate to the \"Upload\" section.</li> <li>Select the audio or video recordings you want to upload.</li> <li>Click on the \"Upload\" button to start the upload process.</li> <li>Wait for the system to process the recordings and generate the transcriptions.</li> </ol>"},{"location":"about/#analyzing-questions","title":"Analyzing Questions","text":"<p>To analyze the questions asked by students during the lesson, follow these steps:</p> <ol> <li>Navigate to the \"Question Analysis\" section.</li> <li>Select the transcriptions you want to analyze.</li> <li>Click on the \"Analyze\" button to start the analysis process.</li> <li>Explore the question analysis results, including the classification of questions based on their level of inquiry.</li> </ol>"},{"location":"about/#conclusion","title":"Conclusion","text":"<p>ClassifAI is a powerful tool for teachers to transcribe and analyze their lesson recordings, providing valuable insights into the level of inquiry of the questions asked by students. By leveraging advanced speech recognition and machine learning techniques, ClassifAI aims to enhance the teaching and learning experience in educational settings.</p> <p>For more information, refer to the ClassifAI GitHub repository or contact our support team at tcuclassifai@gmail.com</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#classifai-api-100","title":"ClassifAI API 1.0.0","text":"<p>ClassifAI API</p> Contact: ClassifAI Team"},{"location":"api/#servers","title":"Servers","text":"Description URL Development server localhost:5000"},{"location":"api/#reports","title":"reports","text":""},{"location":"api/#get-reports","title":"GET /reports","text":"<p>Get all reports from all users (ADMIN)</p> Description <p>gets all reports from all registered users</p> <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"userId\": \"johnnguyen\",\n\"reportId\": \"myReport\",\n\"file\": \"all.csv\",\n\"gradeLevel\": \"12\",\n\"subject\": \"music\",\n\"fileName\": \"transcript\"\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/Report\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#get-reportsusersuserid","title":"GET /reports/users/{userId}","text":"<p>Get all reports created by this user</p> Description <p>Get all reports by owned by this user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>userId</code> path integer No ID of superfrog to return <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"flag\": true,\n\"code\": 200,\n\"message\": \"Find All Success\",\n\"data\": [\n{\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"senior design\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"senior_design_lecture\"\n},\n{\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"operating_systems\",\n\"file\": \"OS_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"senior_design_lecture\"\n},\n{\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"DeepLearning\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"deep_learning_lecture\"\n}\n]\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/ApiResponseFindAllReportsByUser\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#get-reportsreportid","title":"GET /reports/{reportId}","text":"<p>Get a report by reportId</p> Description <p>get a report by reportId</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>reportId</code> path string No id of report <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"userId\": \"johnnguyen\",\n\"reportId\": \"myReport\",\n\"file\": \"all.csv\",\n\"gradeLevel\": \"12\",\n\"subject\": \"music\",\n\"fileName\": \"transcript\"\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/Report\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#post-reportsreportidusersuserid","title":"POST /reports/{reportId}/users/{userId}","text":"<p>Add a new report created by this user</p> Description <p>Add a new report created by specified user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>reportId</code> path string No reportId is the reportName <code>userId</code> path string No userId owner of report <p>Request body</p> application/json <p><pre><code>{\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"senior design\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"senior_design_lecture\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n\"allOf\": [\n{\n\"$ref\": \"#/components/schemas/Report\"\n}\n],\n\"example\": {\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"senior design\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"senior_design_lecture\"\n}\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n\"flag\": true,\n\"code\": 200,\n\"message\": \"Add Success\",\n\"data\": {\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"DeepLearning\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"deep_learning_lecture\"\n}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"title\": \"API response for addReport\",\n\"type\": \"object\",\n\"properties\": {\n\"flag\": {\n\"type\": \"boolean\",\n\"description\": \"Flag to indicate if the request was successful\"\n},\n\"code\": {\n\"type\": \"integer\",\n\"description\": \"HTTP status code\",\n\"example\": 200\n},\n\"message\": {\n\"type\": \"string\",\n\"description\": \"Message to indicate if the request was successful\",\n\"example\": \"Add Success\"\n},\n\"data\": {\n\"allOf\": [\n{\n\"$ref\": \"#/components/schemas/Report\"\n}\n],\n\"example\": {\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"DeepLearning\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"deep_learning_lecture\"\n}\n}\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> application/json <p><pre><code>{\n\"flag\": false,\n\"code\": 400,\n\"message\": \"Provided arguments are invalid, see data for details.\",\n\"data\": {\n\"reportId\": \"reportId is required\",\n\"userId\": \"userId is required\",\n\"file\": \"file is required\"\n}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"title\": \"API response for bad request error\",\n\"description\": \"The schema for bad request error\",\n\"type\": \"object\",\n\"properties\": {\n\"flag\": {\n\"title\": \"flag\",\n\"description\": \"Success or not\",\n\"type\": \"boolean\",\n\"example\": false,\n\"readOnly\": true\n},\n\"code\": {\n\"title\": \"Http status code\",\n\"description\": \"Http status code\",\n\"type\": \"integer\",\n\"example\": 400,\n\"readOnly\": true\n},\n\"message\": {\n\"title\": \"Message\",\n\"description\": \"The long error message\",\n\"type\": \"string\",\n\"example\": \"Provided arguments are invalid, see data for details.\",\n\"readOnly\": true\n},\n\"data\": {\n\"$ref\": \"#/components/schemas/ReportFileBadRequest\"\n}\n}\n}\n</code></pre>"},{"location":"api/#put-reportsreportidusersuserid","title":"PUT /reports/{reportId}/users/{userId}","text":"<p>modify an existing report owned by user</p> Description <p>modify existing report created by the user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>reportId</code> path string No id of report <code>userId</code> path string No id of report <p>Request body</p> application/json <p><pre><code>{\n\"file\": \"os_lecture.mp4\",\n\"fileName\": \"os_lecture\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n\"allOf\": [\n{\n\"$ref\": \"#/components/schemas/Report\"\n}\n],\n\"example\": {\n\"file\": \"os_lecture.mp4\",\n\"fileName\": \"os_lecture\"\n}\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"userId\": \"johnnguyen\",\n\"reportId\": \"myReport\",\n\"file\": \"all.csv\",\n\"gradeLevel\": \"12\",\n\"subject\": \"music\",\n\"fileName\": \"transcript\"\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/Report\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#delete-reportsreportidusersuserid","title":"DELETE /reports/{reportId}/users/{userId}","text":"<p>Deletes a report that the user created</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>reportId</code> path string No id of report <code>userId</code> path string No id of report <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#files","title":"files","text":""},{"location":"api/#get-files","title":"GET /files","text":"<p>Get all export data files from all users (ADMIN)</p> Description <p>gets all export data files from all registered users</p> <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"userId\": \"johnnguyen\",\n\"reportId\": \"myReport\",\n\"file\": \"all.csv\",\n\"gradeLevel\": \"12\",\n\"subject\": \"music\",\n\"fileName\": \"transcript\"\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/Report\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#get-filesusersuserid","title":"GET /files/users/{userId}","text":"<p>Get all export data files created by user</p> Description <p>gets all export data files created by user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>userId</code> path string No id of user <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"userId\": \"johnnguyen\",\n\"reportId\": \"myReport\",\n\"file\": \"all.csv\",\n\"gradeLevel\": \"12\",\n\"subject\": \"music\",\n\"fileName\": \"transcript\"\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/Report\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#post-filesreportsreportidusersuserid","title":"POST /files/reports/{reportId}/users/{userId}","text":"<p>Adds a new file tied to report</p> Description <p>Adds a new file with associated reportId and userId</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>reportId</code> path string No reportId is the reportName <code>userId</code> path string No userId owner of report <p>Request body</p> application/json <p><pre><code>{\n\"reportId\": \"seniorDesignReport\",\n\"userId\": \"johnnguyen\",\n\"file\": \"transcript.csv\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n\"allOf\": [\n{\n\"$ref\": \"#/components/schemas/File\"\n}\n],\n\"example\": {\n\"reportId\": \"seniorDesignReport\",\n\"userId\": \"johnnguyen\",\n\"file\": \"transcript.csv\"\n}\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n\"flag\": true,\n\"code\": 200,\n\"message\": \"Add Success\",\n\"data\": {\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"DeepLearning\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"deep_learning_lecture\"\n}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"title\": \"API response for addReport\",\n\"type\": \"object\",\n\"properties\": {\n\"flag\": {\n\"type\": \"boolean\",\n\"description\": \"Flag to indicate if the request was successful\"\n},\n\"code\": {\n\"type\": \"integer\",\n\"description\": \"HTTP status code\",\n\"example\": 200\n},\n\"message\": {\n\"type\": \"string\",\n\"description\": \"Message to indicate if the request was successful\",\n\"example\": \"Add Success\"\n},\n\"data\": {\n\"allOf\": [\n{\n\"$ref\": \"#/components/schemas/Report\"\n}\n],\n\"example\": {\n\"usesrId\": \"johnnguyen\",\n\"reportId\": \"DeepLearning\",\n\"file\": \"senior_design_lecture.mp4\",\n\"gradeLevel\": \"12\",\n\"subject\": \"computer science\",\n\"fileName\": \"deep_learning_lecture\"\n}\n}\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> application/json <p><pre><code>{\n\"flag\": false,\n\"code\": 400,\n\"message\": \"Provided arguments are invalid, see data for details.\",\n\"data\": {\n\"reportId\": \"reportId is required\",\n\"userId\": \"userId is required\",\n\"file\": \"file is required\"\n}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"title\": \"API response for bad request error\",\n\"description\": \"The schema for bad request error\",\n\"type\": \"object\",\n\"properties\": {\n\"flag\": {\n\"title\": \"flag\",\n\"description\": \"Success or not\",\n\"type\": \"boolean\",\n\"example\": false,\n\"readOnly\": true\n},\n\"code\": {\n\"title\": \"Http status code\",\n\"description\": \"Http status code\",\n\"type\": \"integer\",\n\"example\": 400,\n\"readOnly\": true\n},\n\"message\": {\n\"title\": \"Message\",\n\"description\": \"The long error message\",\n\"type\": \"string\",\n\"example\": \"Provided arguments are invalid, see data for details.\",\n\"readOnly\": true\n},\n\"data\": {\n\"$ref\": \"#/components/schemas/ReportFileBadRequest\"\n}\n}\n}\n</code></pre>"},{"location":"api/#put-filesfilenamereportsreportidusersuserid","title":"PUT /files/{fileName}/reports/{reportId}/users/{userId}","text":"<p>modify an existing export data file</p> Description <p>modify an existing export data file owned by user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>fileName</code> path string No name of File <code>reportId</code> path string No id of report <code>userId</code> path string No id of user <p> Response 200 OK </p> application/json <p><pre><code>[\n{\n\"userId\": \"johnnguyen\",\n\"reportId\": \"myReport\",\n\"file\": \"all.csv\",\n\"gradeLevel\": \"12\",\n\"subject\": \"music\",\n\"fileName\": \"transcript\"\n}\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n\"type\": \"array\",\n\"items\": {\n\"$ref\": \"#/components/schemas/Report\"\n}\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#delete-filesfilenamereportsreportidusersuserid","title":"DELETE /files/{fileName}/reports/{reportId}/users/{userId}","text":"<p>Deletes an export data file</p> Description <p>Deletes an export data file associated with report created by user</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>fileName</code> path string No name of File <code>reportId</code> path string No id of report <code>userId</code> path string No id of report <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#schemas","title":"Schemas","text":""},{"location":"api/#apiresponseaddreport","title":"ApiResponseAddReport","text":"Name Type <code>code</code> integer <code>data</code> <code>flag</code> boolean <code>message</code> string"},{"location":"api/#apiresponsebadrequest","title":"ApiResponseBadRequest","text":"Name Type <code>code</code> integer <code>data</code> ReportFileBadRequest <code>flag</code> boolean <code>message</code> string"},{"location":"api/#apiresponsefindallreportsbyuser","title":"ApiResponseFindAllReportsByUser","text":"Name Type <code>code</code> integer <code>data</code> ReportList <code>flag</code> boolean <code>message</code> string"},{"location":"api/#apiresponsefindreportbyid","title":"ApiResponseFindReportById","text":"Name Type <code>code</code> integer <code>data</code> <code>flag</code> boolean <code>message</code> string"},{"location":"api/#apiresponseupdatereport","title":"ApiResponseUpdateReport","text":"Name Type <code>code</code> integer <code>data</code> <code>flag</code> boolean <code>message</code> string"},{"location":"api/#file","title":"File","text":"Name Type <code>file</code> string <code>fileName</code> string <code>reportId</code> string <code>userId</code> string"},{"location":"api/#report","title":"Report","text":"Name Type <code>file</code> string <code>fileName</code> string <code>gradeLevel</code> string <code>reportId</code> string <code>subject</code> string <code>userId</code> string"},{"location":"api/#reportfilebadrequest","title":"ReportFileBadRequest","text":"Name Type <code>file</code> string <code>reportId</code> string <code>userId</code> string"},{"location":"api/#reportlist","title":"ReportList","text":"<p>Type: Array&lt;Report&gt;</p>"},{"location":"api/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description api_key apiKey api_key_query apiKey"},{"location":"api/#tags","title":"Tags","text":"Name Description reports What you can do relating to reports management as a logged in user. files What you can do relating to export data files management as a logged in user. user All user operations are handled by AWS Cognito sentences legacy code operations to support assembly AI model get and save reports <p>&lt;&gt; # Path: docs/swagger.yaml. Auto-generated from OpenAPI spec via https://www.neoteroi.dev/mkdocs-plugins/web/oad/</p>"},{"location":"pull_request_template/","title":"Pull request template","text":""},{"location":"pull_request_template/#type-of-change","title":"Type of Change","text":"<p>(Bug fix, new feature, documentation, configuration update, etc.)</p>"},{"location":"pull_request_template/#context","title":"Context","text":"<p>[Insert the issue number or link to the related issue, if applicable]</p>"},{"location":"pull_request_template/#changes-made","title":"Changes Made","text":"<ul> <li>[Insert a bullet point list of the changes made in this pull request]</li> </ul>"},{"location":"pull_request_template/#screenshots","title":"Screenshots","text":"<p>[Insert any relevant screenshots, if applicable]</p>"},{"location":"pull_request_template/#checklist","title":"Checklist","text":"<ul> <li>[ ] I have tested these changes locally</li> <li>[ ] I have updated the documentation, if applicable</li> <li>[ ] I have added unit tests, if applicable</li> </ul>"},{"location":"structure/","title":"Project Structure","text":""},{"location":"structure/#directory-structure-of-the-project","title":"Directory Structure of the Project","text":"<pre><code>C: ClassifAI\n\u251c\u2500\u2500 .github\n\u2502   \u2514\u2500\u2500 workflows              # Github Actions for CI/CD. Includes automated testing and deployment.\n\u251c\u2500\u2500 docs                       # Folder for documentation. Uses mkdocs.\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 images                 # Images for documentation.\n\u2502   \u251c\u2500\u2500 swagger.yaml           # OpenAPI spec for the API, see API Reference for more information.\n\u2502   \u2514\u2500\u2500 [various .md files]    # Documentation files. See docs/contribution/editing_docs.md for more information.\n\u251c\u2500\u2500 frontend                   # Front end for the engine. Uses React/Vite.\n\u2502   \u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u251c\u2500\u2500 Account\n\u2502       \u251c\u2500\u2500 Login\n\u2502       \u251c\u2500\u2500 Navbar\n\u2502       \u251c\u2500\u2500 SignUp\n\u2502       \u251c\u2500\u2500 SignOut\n\u2502       \u251c\u2500\u2500 Main\n\u2502       \u2502   \u251c\u2500\u2500 Submission     # Where the user submits the file to be processed.\n\u2502       \u2502   \u251c\u2500\u2500 components\n\u2502       \u2502   \u251c\u2500\u2500 pages\n\u2502       \u2502   \u251c\u2500\u2500 App.js\n\u2502       \u2502   \u251c\u2500\u2500 index.css\n\u2502       \u2502   \u2514\u2500\u2500 files\n\u2502       \u251c\u2500\u2500 Upload\n\u2502       \u251c\u2500\u2500 css\n\u2502       \u251c\u2500\u2500 images\n\u2502       \u2514\u2500\u2500 pages\n\u2502           \u251c\u2500\u2500 classification\n\u2502           \u251c\u2500\u2500 dashboard\n\u2502           \u251c\u2500\u2500 home\n\u2502           \u251c\u2500\u2500 login\n\u2502           \u251c\u2500\u2500 register\n\u2502           \u251c\u2500\u2500 transcription\n\u2502           \u2514\u2500\u2500 upload\n\u251c\u2500\u2500 backend                    # Backend for the engine. Includes routes, database config, server entry point.\n\u2502   \u251c\u2500\u2500 routes\n\u2502   \u2502   \u251c\u2500\u2500 transcription.js\n\u2502   \u2502   \u251c\u2500\u2500 upload.js\n\u2502   \u2502   \u251c\u2500\u2500 user.js\n\u2502   \u2502   \u2514\u2500\u2500 utils.js\n\u2502   \u251c\u2500\u2500 testing\n\u2502   \u251c\u2500\u2500 mongo.js               # MongoDB configuration script.\n\u2502   \u251c\u2500\u2500 server.js              # Backend server entry point.\n\u2502   \u2514\u2500\u2500 package.json/package-lock.json\n\u251c\u2500\u2500 resources                  # Resources for Docker and database initialization.\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 mongo-init.js          # MongoDB initialization script.\n\u2502   \u2514\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"contribution/contributing/","title":"Contribution","text":""},{"location":"contribution/contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Make your changes</li> <li>Run <code>pre-commit run --all-files</code> to run all hooks on all files.</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li> <p>Open a Pull Request</p> </li> <li> <p>Pull requests must be reviewed by at least one other person before being merged.</p> </li> <li>Pull requests must pass all checks before being merged.</li> <li>If you have access to the slack channel, please post a link to your PR in the slack channel, that is the fastest way to get it reviewed.</li> </ol>"},{"location":"contribution/contributing/#specifications","title":"Specifications","text":"<ul> <li>Style Guide</li> </ul>"},{"location":"contribution/contributing/#reminders","title":"Reminders","text":"<ul> <li>Be sure to write tests for your code. These are within the <code>tests</code> directory.</li> <li>Your PR will not be merged if it does not pass all tests.</li> <li>Be sure to write docstrings for your code. </li> <li>You have to re-run <code>git add</code> after the pre-commit hook runs.</li> <li>Pull requests must be reviewed by at least one other person before being merged.</li> </ul>"},{"location":"contribution/editing_docs/","title":"Editing Documentation","text":"<p>This Documentation is built using MkDocs and Material for MkDocs</p> <p>For full documentation visit mkdocs.org and squidfunk.github.io/mkdocs-material</p>"},{"location":"contribution/editing_docs/#tldr","title":"TL;DR","text":"<p>Editing this documentation is easy, just edit the markdown files in the <code>docs</code> folder and push to the <code>main</code> branch. The documentation will be automatically built and deployed to GitHub Pages.</p>"},{"location":"contribution/editing_docs/#installation","title":"Installation","text":"<p>Install the latest version of MkDocs with <code>pip</code>:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"contribution/editing_docs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Deploy to GitHub Pages </li> </ul> <p>mkdocs are automatically built and deployed to GitHub Pages using GitHub Actions. The configuration for this can be found in <code>.github/workflows/deploy_docs.yml</code>.</p>"},{"location":"contribution/editing_docs/#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<p>To deploy the documentation to GitHub Pages, run the following command:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"contribution/editing_docs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"getting_started/express/","title":"Starting up the Web Server Backend","text":""},{"location":"getting_started/express/#this-guide-outlines-the-steps-to-start-up-the-backend-server-for-classifai","title":"This guide outlines the steps to start up the backend server for ClassifAI.","text":""},{"location":"getting_started/express/#step-1-sync-with-github-repository","title":"Step 1: Sync with GitHub Repository","text":"<p>Ensure you have the latest version of our codebase:</p> <ul> <li>Pull Latest Files: Execute <code>git pull origin main</code> to fetch the most recent files from the main branch on GitHub.</li> <li>Merge Development Branch: If working on a feature, merge the latest changes from the development branch into your current branch using <code>git merge dev</code></li> </ul>"},{"location":"getting_started/express/#step-2-set-up-environment-variables","title":"Step 2: Set Up Environment Variables","text":"<ul> <li>Retrieve .env File: Download the <code>.env</code> file from our shared Google Drive, or copy the contents of the <code>.env</code> file into your local <code>.env</code> file.</li> </ul>"},{"location":"getting_started/express/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<p>Run <code>npm install</code> in the project directory to install all necessary dependencies.</p>"},{"location":"getting_started/express/#step-4-initialize-mongodb-with-docker","title":"Step 4: Initialize MongoDB with Docker","text":"<p>Assuming you are in the ClassifAI parent directory:</p> <ul> <li>Start Jaxon's Development MongoDB: Use Docker to launch the MongoDB instance with <code>docker-compose -f ./resources/docker-compose.yml up</code></li> <li>Verify Connection: Ensure that the MongoDB instance is running and accessible.</li> </ul>"},{"location":"getting_started/express/#step-5-populate-database-with-test-data","title":"Step 5: Populate Database with Test Data","text":"<ul> <li>Run Faker.js Script: Execute <code>node ./backend/DB_Testing/faker.js</code> to fill the MongoDB database with test data.</li> </ul>"},{"location":"getting_started/express/#step-6-launch-the-test-workstation","title":"Step 6: Launch the test workstation","text":"<ul> <li>Start test workstation: Run <code>python ./backend/Workstation_Testing/testWorkstation.py</code> to simulate the workstation server. (Useful for testing if your file is actually uploaded/sent)</li> </ul>"},{"location":"getting_started/express/#step-7-launch-the-backend-server","title":"Step 7: Launch the Backend Server","text":"<ul> <li>Start Backend: Run <code>node ./backend/server.js</code> to initiate the backend server.</li> <li>Verify Operation: Check <code>localhost:5000</code> to ensure the server is running and can connect to the MongoDB instance.</li> </ul>"},{"location":"getting_started/express/#notes-and-troubleshooting","title":"Notes and Troubleshooting","text":"<ul> <li>Ensure Docker is running before initiating MongoDB.</li> <li>For any issues related to database connections, check the MongoDB logs and the .env file configurations.</li> </ul>"},{"location":"getting_started/express/#optional-easily-view-mongodb-documents","title":"(Optional) Easily View MongoDB Documents","text":"<p>Connect MongoDB Compass to the development MongoDB for easy data viewing:</p>"},{"location":"getting_started/express/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"getting_started/express/#step-1-install-mongodb-compass","title":"Step 1: Install MongoDB Compass","text":"<p>Ensure you have MongoDB Compass installed on your system. If not, download and install it from the MongoDB Compass Download Page.</p>"},{"location":"getting_started/express/#step-2-gather-connection-details","title":"Step 2: Gather Connection Details","text":"<p>Obtain the necessary connection details for your development MongoDB. Typically, this information includes:</p> <ul> <li> <p>Hostname: The address of the MongoDB server.</p> </li> <li> <p>Port: The port number MongoDB is listening on.</p> </li> <li> <p>Authentication: Username and password if authentication is enabled.</p> </li> <li> <p>Database: The specific database you want to connect to (optional).</p> </li> </ul>"},{"location":"getting_started/express/#step-3-open-mongodb-compass","title":"Step 3: Open MongoDB Compass","text":"<p>Launch MongoDB Compass. The initial screen will prompt you to enter your connection details.</p>"},{"location":"getting_started/express/#step-4-enter-connection-string","title":"Step 4: Enter Connection String","text":"<p>In MongoDB Compass, input the connection string in the format:</p> <pre><code>mongodb://[username]:[password]@[hostname]:[port]/[database]\n</code></pre> <p>Replace <code>[username]</code>, <code>[password]</code>, <code>[hostname]</code>, <code>[port]</code>, and <code>[database]</code> with the information found in the <code>.env</code> file.</p>"},{"location":"getting_started/express/#step-5-connect-to-the-database","title":"Step 5: Connect to the Database","text":"<p>After entering the connection string, click the 'Connect' button. MongoDB Compass will attempt to connect to the development MongoDB instance.</p>"},{"location":"getting_started/express/#step-6-explore-the-data","title":"Step 6: Explore the Data","text":"<p>Once connected, you can browse collections, view documents, and query the data using MongoDB Compass's user-friendly interface.</p>"},{"location":"getting_started/express/#new-commands-as-of-123-need-to-update-above","title":"New Commands as of 1/23 (Need to update above)","text":"<pre><code>In Terminal 1:\n    # assuming you're in parent directory\n    docker-compose -f ./resources/docker-compose.yml up\n\nIn Terminal 2:  \n    # assuming you're in parent directory\n    cd backend\n    # ensure .env file for backend is here\n    npm install\n    node ./server.js\n\nIn Terminal 3:  \n    # assuming you're in parent directory\n    python  ./backend/Testing/Workstation_Testing/testWorkstation.py\n</code></pre>"},{"location":"getting_started/express_api/","title":"API Endpoints","text":"<p>This documentation includes information about the endpoint, parameters, request body, response, and error handling. This documentation assumes familiarity with the Express.js framework and the multer library for file uploading.</p> <p>Below is a simple API documentation for your POST route, formatted in Markdown:</p>"},{"location":"getting_started/express_api/#api-documentation-for-file-upload-endpoint","title":"API Documentation for File Upload Endpoint","text":""},{"location":"getting_started/express_api/#post-upload","title":"POST <code>/upload</code>","text":"<p>This endpoint is responsible for uploading files to the web server, updating information in MongoDB, and transferring audio files to a specified workstation.</p>"},{"location":"getting_started/express_api/#request","title":"Request","text":"<ul> <li>URL: <code>/upload</code></li> <li>Method: <code>POST</code></li> <li>Headers:</li> <li><code>Content-Type</code>: <code>multipart/form-data</code></li> <li>Body:</li> <li><code>userId</code> (string, required): The user's unique identifier.</li> <li><code>file</code> (file, required): The file to be uploaded.</li> <li><code>reportID</code> (string, optional): The report's unique identifier.</li> <li>Other optional attributes like <code>subject</code>, <code>grade level</code>, and <code>is_premium</code>.</li> </ul>"},{"location":"getting_started/express_api/#response","title":"Response","text":"<ul> <li>Success (File Uploaded and Processed):</li> <li>Status Code: <code>200 OK</code></li> <li>Content:     <pre><code>{\n\"uploadStatus\": \"successful\",\n\"transferStatus\": \"successful\",\n\"message\": \"File uploaded and [database entry created/transferred] successfully\",\n\"id\": \"[reportID]\"\n}\n</code></pre></li> <li>Invalid File Type:</li> <li>Status Code: <code>400 Bad Request</code></li> <li>Content:     <pre><code>{\n\"uploadStatus\": \"failed\",\n\"message\": \"Invalid file type provided\"\n}\n</code></pre></li> <li>Missing User ID or File:</li> <li>Status Code: <code>400 Bad Request</code></li> <li>Content:     <pre><code>{\n\"uploadStatus\": \"failed\",\n\"message\": \"No userId or file uploaded\"\n}\n</code></pre></li> <li>Server Error or File Transfer Error:</li> <li>Status Code: <code>500 Internal Server Error</code></li> <li>Content:     <pre><code>{\n\"uploadStatus\": \"failed\",\n\"transferStatus\": \"failed\",\n\"message\": \"An error occurred\"\n}\n</code></pre></li> </ul>"},{"location":"getting_started/express_api/#notes","title":"Notes","text":"<ul> <li>The endpoint supports a range of file types, including JSON, CSV, PDF, and several audio formats. Unsupported file types will result in an error.</li> <li>If the file is an audio file, it will be transferred to a workstation for additional processing.</li> <li>The <code>uploadStatus</code> and <code>transferStatus</code> fields in the response indicate the status of the file upload and the transfer process, respectively.</li> </ul>"},{"location":"getting_started/express_api/#api-documentation-for-transcript-retrieval","title":"API Documentation for Transcript Retrieval","text":""},{"location":"getting_started/express_api/#get-transcriptreportid","title":"GET <code>/transcript/reportID</code>","text":"<p>This endpoint retrieves the transcription associated with a given report ID. The transcription status can be either in progress, completed, or encountered an error.</p>"},{"location":"getting_started/express_api/#request_1","title":"Request","text":"<ul> <li>URL: <code>/transcript/reportID</code></li> <li>Method: <code>GET</code></li> <li>URL Parameters:</li> <li><code>reportID</code> (string): The unique identifier of the report for which the transcription is requested.</li> </ul>"},{"location":"getting_started/express_api/#response_1","title":"Response","text":"<ul> <li>Transcription Completed:</li> <li>Status Code: <code>200 OK</code></li> <li>Content:     <pre><code>{\n\"success\": true,\n\"transcription\": \"[transcription text]\"\n}\n</code></pre></li> <li>Transcription in Progress:</li> <li>Status Code: <code>200 OK</code></li> <li>Content:     <pre><code>{\n\"success\": false,\n\"message\": \"Transcription in progress.\"\n}\n</code></pre></li> <li>Transcription Error:</li> <li>Status Code: <code>200 OK</code></li> <li>Content:     <pre><code>{\n\"success\": false,\n\"message\": \"An error occurred during transcription\"\n}\n</code></pre></li> <li>Server Error:</li> <li>Status Code: <code>500 Internal Server Error</code></li> <li>Content:     <pre><code>{\n\"success\": false,\n\"message\": \"An error occurred\"\n}\n</code></pre></li> </ul>"},{"location":"getting_started/express_api/#notes_1","title":"Notes","text":"<ul> <li>The API returns a <code>200 OK</code> status for all transcription states, with the <code>success</code> field in the JSON response indicating whether the transcription was completed successfully, is still in progress, or encountered an error.</li> <li>A <code>500 Internal Server Error</code> is returned for any server-side errors during the processing of the request.</li> </ul>"},{"location":"getting_started/express_api/#api-documentation-for-transcription-update","title":"API Documentation for Transcription Update","text":""},{"location":"getting_started/express_api/#put-transcriptreportid","title":"PUT <code>/transcript/reportID</code>","text":"<p>This endpoint is used to update the transcription of a report, provided that the report's status is marked as 'Completed'.</p>"},{"location":"getting_started/express_api/#request_2","title":"Request","text":"<ul> <li>URL: <code>/transcript/reportID</code></li> <li>Method: <code>PUT</code></li> <li>URL Parameters:</li> <li><code>reportID</code> (string): The unique identifier of the report whose transcription is to be updated.</li> <li>Body:</li> <li><code>transcription</code> (string): The updated text of the transcription.</li> </ul>"},{"location":"getting_started/express_api/#response_2","title":"Response","text":"<ul> <li>Transcription Updated Successfully:</li> <li>Status Code: <code>200 OK</code></li> <li>Content:     <pre><code>{\n\"success\": true,\n\"message\": \"Transcription updated successfully\"\n}\n</code></pre></li> <li>Transcription Update Failed:</li> <li>Status Code: <code>400 Bad Request</code></li> <li>Content:     <pre><code>{\n\"success\": false,\n\"message\": \"Transcription can only be updated for completed files.\"\n}\n</code></pre></li> <li>Report Not Found:</li> <li>Status Code: <code>404 Not Found</code></li> <li>Content:     <pre><code>{\n\"success\": false,\n\"message\": \"Report file not found.\"\n}\n</code></pre></li> <li>Server Error:</li> <li>Status Code: <code>500 Internal Server Error</code></li> <li>Content:     <pre><code>{\n\"success\": false,\n\"message\": \"An error occurred\"\n}\n</code></pre></li> </ul>"},{"location":"getting_started/express_api/#notes_2","title":"Notes","text":"<ul> <li>The transcription can only be updated if the report's status is 'Completed'. Attempting to update a transcription for a report in any other status will result in a <code>400 Bad Request</code> response.</li> <li>A <code>404 Not Found</code> status is returned if the specified report ID does not correspond to an existing report.</li> <li>Any server-side errors during the process will result in a <code>500 Internal Server Error</code> response.</li> </ul>"},{"location":"getting_started/express_api_react/","title":"React Component Guides","text":"<p>Here are quickstart example guides with starter code for getting familiar with the Express backend, adjust code as needed.</p>"},{"location":"getting_started/express_api_react/#react-component-guide-for-testing-file-upload-endpoint","title":"React Component Guide for Testing File Upload Endpoint","text":""},{"location":"getting_started/express_api_react/#overview","title":"Overview","text":"<p>This quickstart guide provides instructions for creating a React component to test the file upload endpoint of the Express server. The endpoint supports file uploads with additional data like <code>userId</code>, <code>reportID</code>, and other optional attributes.</p>"},{"location":"getting_started/express_api_react/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>axios</code> for making HTTP requests.</li> </ul>"},{"location":"getting_started/express_api_react/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"getting_started/express_api_react/#step-1-create-a-new-react-component","title":"Step 1: Create a New React Component","text":"<p>Create a new React component.</p>"},{"location":"getting_started/express_api_react/#step-2-import-dependencies","title":"Step 2: Import Dependencies","text":"<p>Import necessary dependencies: <pre><code>import React, { useState } from 'react';\nimport axios from 'axios';\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-3-create-form-state","title":"Step 3: Create Form State","text":"<p>Set up state hooks for form data: <pre><code>const [file, setFile] = useState(null);\nconst [userId, setUserId] = useState('');\nconst [reportID, setReportID] = useState('');\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-4-handle-file-change","title":"Step 4: Handle File Change","text":"<p>Implement a function to handle file selection: <pre><code>const handleFileChange = (event) =&gt; {\n  setFile(event.target.files[0]);\n};\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-5-handle-form-submission","title":"Step 5: Handle Form Submission","text":"<p>Create a function to handle form submission: <pre><code>const handleSubmit = async (event) =&gt; {\n  event.preventDefault();\n\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('userId', userId);\n  formData.append('reportID', reportID);\n\n  try {\n    const response = await axios.post('http://localhost:5001/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-6-create-form-in-render-method","title":"Step 6: Create Form in Render Method","text":"<p>In the component's render method, create a form for file upload: <pre><code>return (\n  &lt;form onSubmit={handleSubmit}&gt;\n    &lt;input type=\"file\" onChange={handleFileChange} /&gt;\n    &lt;input type=\"text\" placeholder=\"User ID\" value={userId} onChange={(e) =&gt; setUserId(e.target.value)} /&gt;\n    &lt;input type=\"text\" placeholder=\"Report ID (optional)\" value={reportID} onChange={(e) =&gt; setReportID(e.target.value)} /&gt;\n    &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n  &lt;/form&gt;\n);\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-7-integrate-component","title":"Step 7: Integrate Component","text":"<p>Integrate into your React application where necessary.</p>"},{"location":"getting_started/express_api_react/#testing","title":"Testing","text":"<ul> <li>Run your React app.</li> <li>Use the component to select a file and input the required fields.</li> <li>Submit the form and observe the console for responses or errors.</li> </ul> <p>Ideally the reportID will come from our cognito auth instead of being entered, so the above code would need to be adjusted.</p>"},{"location":"getting_started/express_api_react/#react-component-guide-for-testing-transcript-retrieval-endpoint","title":"React Component Guide for Testing Transcript Retrieval Endpoint","text":""},{"location":"getting_started/express_api_react/#overview_1","title":"Overview","text":"<p>This quickstart guide shows the basic idea to create a React component for testing the transcript retrieval endpoint in an Express server. The endpoint fetches a transcription based on a provided <code>reportID</code>.</p>"},{"location":"getting_started/express_api_react/#step-by-step-guide_1","title":"Step-by-Step Guide","text":""},{"location":"getting_started/express_api_react/#step-1-create-a-new-react-component_1","title":"Step 1: Create a New React Component","text":"<p>Create a new React component</p>"},{"location":"getting_started/express_api_react/#step-2-import-dependencies_1","title":"Step 2: Import Dependencies","text":"<p>import necessary dependencies: <pre><code>import React, { useState } from 'react';\nimport axios from 'axios';\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-3-set-up-state-for-report-id-and-transcript","title":"Step 3: Set Up State for Report ID and Transcript","text":"<p>Create state hooks for the report ID and fetched transcript: <pre><code>const [reportID, setReportID] = useState('');\nconst [transcript, setTranscript] = useState('');\nconst [error, setError] = useState('');\n</code></pre></p> <p>Here's how you can use the component to handle and display the test transcript data:</p>"},{"location":"getting_started/express_api_react/#step-4-adjust-fetch-function","title":"Step 4: Adjust Fetch Function","text":"<p>Make sure the fetch function correctly handles the JSON array response:</p> <pre><code>const fetchTranscript = async () =&gt; {\n  try {\n    const response = await axios.get(`http://localhost:5001/transcript/${reportID}`);\n    if (response.data.success) {\n      setTranscript(response.data.transcription);\n    } else {\n      setError(response.data.message);\n    }\n  } catch (err) {\n    setError(err.message);\n  }\n};\n</code></pre>"},{"location":"getting_started/express_api_react/#step-5-create-display-function-for-structured-transcript","title":"Step 5: Create Display Function for Structured Transcript","text":"<p>Modify the render method to include a function that maps over the array of transcript objects and displays the relevant information:</p> <pre><code>const renderTranscript = () =&gt; {\n  if (!transcript || transcript.length === 0) return &lt;p&gt;No transcript available.&lt;/p&gt;;\n\n  return transcript.map((item, index) =&gt; (\n    &lt;div key={index}&gt;\n      &lt;p&gt;Speaker {item.speaker_label} (from {item.start_time}s to {item.end_time}s):&lt;/p&gt;\n      &lt;p&gt;{item.transcript}&lt;/p&gt;\n    &lt;/div&gt;\n  ));\n};\n</code></pre> <p>Then, use this function in your component's return statement:</p> <pre><code>return (\n  &lt;div&gt;\n    &lt;input type=\"text\" placeholder=\"Report ID\" value={reportID} onChange={(e) =&gt; setReportID(e.target.value)} /&gt;\n    &lt;button onClick={fetchTranscript}&gt;Get Transcript&lt;/button&gt;\n    &lt;div&gt;{renderTranscript()}&lt;/div&gt;\n    {error &amp;&amp; &lt;p&gt;Error: {error}&lt;/p&gt;}\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"getting_started/express_api_react/#step-6-integrate-component","title":"Step 6: Integrate Component","text":"<p>Include the component in your React application where necessary.</p>"},{"location":"getting_started/express_api_react/#testing_1","title":"Testing","text":"<ul> <li>Run your React application.</li> <li>Use the component to input a <code>reportID</code>.</li> <li>Click the button to fetch the transcript and observe the results displayed on the screen.</li> </ul>"},{"location":"getting_started/express_api_react/#react-component-guide-for-testing-transcript-update-endpoint","title":"React Component Guide for Testing Transcript Update Endpoint","text":""},{"location":"getting_started/express_api_react/#overview_2","title":"Overview","text":"<p>This quickstart guide outlines how to create a React component for testing the endpoint that updates a transcript. This endpoint accepts a <code>reportID</code> and new transcription text for a completed report.</p>"},{"location":"getting_started/express_api_react/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Install <code>axios</code> for making HTTP requests: <code>npm install axios</code>.</li> </ul>"},{"location":"getting_started/express_api_react/#step-by-step-guide_2","title":"Step-by-Step Guide","text":""},{"location":"getting_started/express_api_react/#step-1-create-a-new-react-component_2","title":"Step 1: Create a New React Component","text":"<p>Create a new React component.</p>"},{"location":"getting_started/express_api_react/#step-2-import-dependencies_2","title":"Step 2: Import Dependencies","text":"<p>Import necessary dependencies: <pre><code>import React, { useState } from 'react';\nimport axios from 'axios';\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-3-set-up-state-for-inputs","title":"Step 3: Set Up State for Inputs","text":"<p>Create state hooks for the <code>reportID</code>, new transcription text, and response message: <pre><code>const [reportID, setReportID] = useState('');\nconst [newTranscription, setNewTranscription] = useState('');\nconst [message, setMessage] = useState('');\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-4-implement-update-function","title":"Step 4: Implement Update Function","text":"<p>Create a function to handle the update request: <pre><code>const updateTranscription = async () =&gt; {\n  try {\n    const response = await axios.put(`http://localhost:5001/transcript/${reportID}`, {\n      transcription: newTranscription\n    });\n\n    setMessage(response.data.message);\n  } catch (err) {\n    setMessage(err.response ? err.response.data.message : err.message);\n  }\n};\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-5-create-form-in-render-method","title":"Step 5: Create Form in Render Method","text":"<p>In the component's render method, create a form for updating the transcript: <pre><code>return (\n  &lt;div&gt;\n    &lt;input type=\"text\" placeholder=\"Report ID\" value={reportID} onChange={(e) =&gt; setReportID(e.target.value)} /&gt;\n    &lt;textarea placeholder=\"New Transcription\" value={newTranscription} onChange={(e) =&gt; setNewTranscription(e.target.value)} /&gt;\n    &lt;button onClick={updateTranscription}&gt;Update Transcription&lt;/button&gt;\n    &lt;p&gt;{message}&lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre></p>"},{"location":"getting_started/express_api_react/#step-6-integrate-component_1","title":"Step 6: Integrate Component","text":"<p>Integrate into your React application where necessary.</p>"},{"location":"getting_started/express_api_react/#testing_2","title":"Testing","text":"<ul> <li>Run your React application.</li> <li>Use the component to input a <code>reportID</code> and new transcription text.</li> <li>Click the button to send the update request and observe the response message displayed on the screen.</li> </ul>"}]}
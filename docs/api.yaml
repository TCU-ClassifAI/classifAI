  openapi: 3.0.0
  info:
    title: ClassifAI API
    description: |-
      ClassifAI API 
    contact:
      name: ClassifAI Team
      url: https://tcu-classifai.github.io/classifAI/
    version: 1.0.0
  servers:
    # Update when it is deployed to Production
    - url: localhost:5000
      description: Development server
  tags:
    - name: reports
      description: What you can do relating to reports management as a logged in user. 
    
    - name: files
      description: What you can do relating to export data files management as a logged in user.
  
    - name: user
      description: All user operations are handled by AWS Cognito
  paths:
  
  # Reports CRUD
    /reports:  
      get:
        tags:
          - reports
        summary: Get all reports from all users (ADMIN)
        description: gets all reports from all registered users
        operationId: getAllReports
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuperFrog'
          '400':
            description: Invalid status value
          '404':
            description: No reports not found
  
  
    
    /reports/users/{userId}:
      get:
        tags:
          - reports
        summary: Get all reports created by this user
        description: Get all reports by owned by this user
        operationId: getuserreports
        parameters:
          - name: userId
            in: path
            description: ID of superfrog to return
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ApiResponseFindAllReportsByUser'
          '400':
            description: Invalid status value
          '404':
            description: report not found
      
    /reports/{reportId}:  
      get:
        tags:
          - reports
        summary: Get a report by reportId
        description: get a report by reportId
        operationId: getReportById
        parameters:
          - name: reportId
            in: path
            description: id of report
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuperFrog'
          '400':
            description: Invalid status value
          '404':
            description: report not found
            
    /reports/{reportId}/users/{userId}:  
      post:
        tags:
          - reports
        summary: Add a new report created by this user
        description: Add a new report created by specified user
        operationId: addReport
        parameters:
          - name: reportId
            in: path
            description: reportId is the reportName
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: userId owner of report
            required: true
            schema:
              type: string
        requestBody:
          description: SuperFrog object that needs to be added
          required: true
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuperFrog'
                example:
                  firstName: "SuperFrog"
                  lastName: "example"
                  email: "aej@gmail.com"
                  password: "password"
                  active: true
        responses:
          200:
            description: SuperFrog created 
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponseAddSuperfrog'
          400:
            description: Bad request
            content:
                application/json:
                    schema:
                      $ref: '#/components/schemas/ApiResponseSuperfrogBadRequest'
 
      put:
        tags:
          - reports
        summary: modify an existing report owned by user
        description: modify existing report created by the user
        operationId: modifyExistingReport
        parameters:
          - name: reportId
            in: path
            description: id of report
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: id of report
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuperFrog'
          '400':
            description: Invalid status value
          '404':
            description: report not found
      delete:
        tags:
          - reports
        summary: Deletes a report that the user created
        description: Deletes a report that the user created
        operationId: deleteReport
        parameters:
          - name: reportId
            in: path
            description: id of report
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: id of report
            required: true
            schema:
              type: string
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Request not found
            
            
    /files:  
      get:
        tags:
          - files
        summary: Get all export data files from all users (ADMIN)
        description: gets all export data files from all registered users
        operationId: getAllFiles
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuperFrog'
          '400':
            description: Invalid status value
          '404':
            description: No reports not found
            
    /files/users/{userId}:  
      get:
        tags:
          - files
        summary: Get all export data files created by user
        description: gets all export data files created by user
        operationId: getFilesByUser
        parameters:
          - name: userId
            in: path
            description: id of user
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuperFrog'
          '400':
            description: Invalid status value
          '404':
            description: No reports not found
     
    /files/reports/{reportId}/users/{userId}:  
      post:
        tags:
          - files
        summary: Adds a new file tied to report
        description: Adds a new file with associated reportId and userId
        operationId: uploadFile
        parameters:
          - name: reportId
            in: path
            description: reportId is the reportName
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: userId owner of report
            required: true
            schema:
              type: string
        requestBody:
          description: SuperFrog object that needs to be added
          required: true
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuperFrog'
                example:
                  firstName: "SuperFrog"
                  lastName: "example"
                  email: "aej@gmail.com"
                  password: "password"
                  active: true
        responses:
          200:
            description: SuperFrog created 
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponseAddSuperfrog'
          400:
            description: Bad request
            content:
                application/json:
                    schema:
                      $ref: '#/components/schemas/ApiResponseSuperfrogBadRequest'
      put:
        tags:
          - files
        summary: modify an existing export data file
        description: modify an existing export data file owned by user
        operationId: modifyExistingFile
        parameters:
          - name: reportId
            in: path
            description: id of report
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: id of report
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuperFrog'
          '400':
            description: Invalid status value
          '404':
            description: report not found
      delete:
        tags:
          - files
        summary: Deletes an export data file
        description: Deletes an export data file associated with report created by user
        operationId: deleteFile
        parameters:
          - name: reportId
            in: path
            description: id of report
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: id of report
            required: true
            schema:
              type: string
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Request not found
            
  components:
    schemas:
      SuperFrog:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          firstName:
            type: string
            example: "John"
          lastName:
            type: string
            example: "Mejyen"
          email:
            type: string
            format: email
            example: "example@gmail.com"
          password:
            type: string
            format: password
            example: "password"
          active:
            type: boolean
            example: true
        required: 
          - firstName
          - lastName
          - email
          - password
  
      Request:
        type: object
        properties:
          id:
            type: integer
            format: int64
          superfrogID:
            type: integer
            format: int64
          status:
            type: string
          eventDescription:
            type: string
          created:
            type: string
            format: date-time
          updated:
            type: string
            format: date-time
          contactFirstName:
            type: string
          contactLastName:
            type: string
          phoneNumber:
            type: string
          email:
            type: string
            format: email
          eventTitle: 
            type: string
          nameOfOrganization:
            type: string
          addressOfAppearance:
            type: string
          specialInstructions:
            type: string
          outsideOrganizations:
            type: string
          expensesBenefits:
            type: string
          scheduleDate:
            type: string
          startTime:
            type: string
          endTime: 
            type: string
          eventType:
            type: string
          totalCost:
            type: number
            format: double   
      User:
        type: object
        properties:
          id:
            type: integer
            format: int64
          username:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          password:
            type: string
            format: password
          phone:
            type: string
          userStatus:
            type: integer
            format: int32
            description: User Status
        required:
          - firstName
          - lastName
          - email
          - password
          - phone
          - userStatus
      SuperFrogList:
        type: array
        items:
          $ref: '#/components/schemas/SuperFrog'
        example:
          - id: 1
            firstName: "John"
            lastName: "Mejyen"
            email: "example@gmail.com"
            password: "password"
            active: true
          - id: 2
            firstName: "Joey"
            lastName: "Quinn"
            email: "iamacat@gmail.com"
            password: "password2"
            active: true
          - id: 3
            firstName: "Ethan"
            lastName: "Edinboro"
            email: "jo@gmail.com"
            password: "password3"
            active: false
      ApiResponseFindAllReportsByUser:
        title: API response for findAllsuperfrogstudents
        type: object
        properties:
          flag:
            type: boolean
            description: Flag to indicate if the request was successful
          code: 
            type: integer
            description: HTTP status code
            example: 200
          message:
            type: string
            description: Message to indicate if the request was successful
            example: "Find All Success"
          data:
            $ref: '#/components/schemas/SuperFrogList'
      ApiResponseAddSuperfrog:
        title: API response for addSuperFrog
        type: object
        properties:
          flag:
            type: boolean
            description: Flag to indicate if the request was successful
          code: 
            type: integer
            description: HTTP status code
            example: 200
          message:
            type: string
            description: Message to indicate if the request was successful
            example: "Add Success"
          data:
            allOf:
              - $ref: '#/components/schemas/SuperFrog'
            example:
              id: 1
              username: "superfrog1"
              firstName: "John"
              lastName: "Mejyen"
              email: "asaifd@gmail.com"
              password: "password"
              active: true
      ApiResponseFindSuperfrogById: 
        title: API response for findSuperFrogById
        type: object
        properties:
          flag:
            type: boolean
            description: Flag to indicate if the request was successful
          code: 
            type: integer
            description: HTTP status code
            example: 200
          message:
            type: string
            description: Message to indicate if the request was successful
            example: "Find By Id Success"
          data:
            allOf:
              - $ref: '#/components/schemas/SuperFrog'
            example:
              id: 1
              username: "superfrog1"
              firstName: "John"
              lastName: "Mejyen"
              email: "meow@gmail.com"
              password: "password"
              active: true
      ApiResponseUpdateSuperfrog:
        title: API response for updateSuperfrog
        type: object
        properties:
          flag:
            type: boolean
            description: Flag to indicate if the request was successful
          code: 
            type: integer
            description: HTTP status code
            example: 200
          message:
            type: string
            description: Message to indicate if the request was successful
            example: "Update Success"
          data:
            allOf:
              - $ref: '#/components/schemas/SuperFrog'
            example:
              id: 1
              firstName: "John"
              lastName: "Mejyen"
              email: "misty@gmail.com"
              password: "password"
              active: true
      ApiResponseSuperfrogBadRequest:
        title: API response for bad request error
        description: The schema for bad request error
        type: object
        properties:
          flag:
            title: flag
            description: Success or not
            type: boolean
            example: false
            readOnly: true
          code:
            title: Http status code
            description: Http status code
            type: integer
            example: 400
            readOnly: true
          message:
            title: Message
            description: The long error message
            type: string
            example: Provided arguments are invalid, see data for details.
            readOnly: true
          data:
            $ref: '#/components/schemas/SuperfrogBadRequest'
      SuperfrogBadRequest:
        title: Superfrog bad request
        description: Messages describing a bad request error
        type: object
        properties:
          firstName:
            title: First name
            description: First name error message
            type: string
            example: first name is required
          lastName:
            title: Last name
            description: Last name error message
            type: string
            example: last name is required
          email:
            title: Email
            description: Email error message
            type: string
            example: email is required
          password:
            title: Password
            description: Password error message
            type: string
            example: password is required
        
      
    securitySchemes:
      api_key:
        type: apiKey
        name: api_key
        in: header
      api_key_query:
        type: apiKey
        name: api_key
        in: query
        